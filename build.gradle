// https://docs.gradle.org/current/userguide/what_is_gradle.html#5_build_scripts_operate_against_an_api
// 1. gradle 根据任务来构建。
// 2. gradle 固定的构建阶段：初始化，配置，执行。 https://www.jianshu.com/p/4f0ff9bd2f62

// 顶层构建文件，您可以在其中添加所有子项目/模块通用的配置选项。
git 测试123455
// https://docs.gradle.org/current/userguide/tutorial_using_tasks.html#header
// 构建脚本
buildscript {
    // ext 是个map字段，存放基本数据类型
    ext {
        compileSdkVersion = 31
        buildToolsVersion = "26.0.0"
        minSdkVersion = 14
        targetSdkVersion = 31
//        appcompatV7 = "com.android.support:appcompat-v7:$androidSupportVersion"
    }
    // 指定kotlin版本
    ext.kotlin_version = '1.6.10'
    ext.anko_version='0.10.8'
    dependencies {
        classpath 'com.android.tools.build:gradle:7.1.2'
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath 'com.github.dcendents:android-maven-gradle-plugin:2.1'
        def nav_version = "2.4.1"
        classpath("androidx.navigation:navigation-safe-args-gradle-plugin:$nav_version")
    }
}


// Top-level build file where you can add configuration options common to all sub-projects/modules.
plugins {
    // apply false语法告诉Gradle不要将插件应用于当前项目，然后在子项目的构建脚本中使用没有版本的plugins{}块
    // 将应用模块
    id 'com.android.application' version '7.1.2' apply false
    // https://developer.android.com/studio/projects/android-library?hl=zh-cn#groovy
    // 将应用模块转换为库模块
    id 'com.android.library' version '7.1.1' apply false
    // kotlin gradle 插件
    id 'org.jetbrains.kotlin.android' version '1.6.10' apply false
    // Maven发布插件提供了将构建工件发布到ApacheMaven存储库的能力
    // https://developer.android.com/studio/build/maven-publish-plugin
    id 'maven-publish'
    // 使用 Safe Args 确保类型安全
    // https://developer.android.com/guide/navigation/navigation-getting-started
    id 'androidx.navigation.safeargs.kotlin' version '2.4.1' apply false
}

allprojects {
    //访问特定类型的任务
    tasks.withType(Javadoc) {
        // 停用 DocLint
        options.addStringOption('Xdoclint:none', '-quiet')
        options.addStringOption('encoding', 'UTF-8')
    }
}
// 删除任务
task clean(type: Delete) {
    println('clean task')
    delete rootProject.buildDir
}